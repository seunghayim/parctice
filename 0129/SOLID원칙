# SOLID 원칙
# S -> Single responsibility principle
# 모든 클래스는 단 하나의 책임만을 갖고, 클레스 안에 모든 기능은,
# 이 책임을 수행하는데 집중되어 있어야 한다.

# 0 -> Open / closed principle
# 확장에는 열려있다-> 기능의 확장
# 수정에는 닫혀있다-> 한 번 작성한 코드는 바꾸지 않아도 된다.
# 같은 기능을 하는 클레스를 추상클레스로 만들어 화용하면 된다.
# 또한 오버라이딩을 통해 기능을 확장할 수 있다.

# L -> Liskov substitution principle
# 오버라이딩을 잘해라.. or  규칙을 지키기 힘들다면 새로운 함수를 자식클레스에서 만들어라
# 1. 부모클래스의 의도와 같게 해라 -> 자식클레스가 부모클레스의 행동양식을 지킬 수 없다면 상속하지 않는걸 권장
# 2. 부모클레스의 변수,리턴값의 타입을 변경하거나, 개수 또는 메소드 파라미터를 바꾸면 안된다. 

# I -> Interface segregation principle
# 클래스가 사용하지 않을 메소드에 의존할 것을 강요하면 안 된다.
# 뚱뚱한 인터페이스를 만들지 말아라 -> 작은 인터페이스로 분류 ( 같은역할중요)

# D -> Dependency inversion principle
# 상위 모듈(사용하는)은 하위 모듈(사용 당하는)의 구현 내용에 의존하면 x -> 추상화 내용이 의존해야 한다.
